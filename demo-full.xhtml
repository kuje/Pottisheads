<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<link rel="stylesheet" type="text/css" href="stylesheets/master.css" />
	<title></title>
	
	<script type="text/javascript" src="javascripts/jquery-1.3.2.min.js"></script>
	
	<script type="text/javascript" src="javascripts/rgbcolor.js"></script>
	<script type="text/javascript" src="javascripts/canvg.js"></script>
	
	<script type="text/javascript" src="javascripts/pixel_toolbar.js"></script>
	<script type="text/javascript" src="javascripts/pixel_canvas.js"></script>
	<script type="text/javascript" src="javascripts/vector_svg.js"></script>

	<script type="text/javascript" src="javascripts/canvas_to_svg.js"></script>
	<script type="text/javascript" src="javascripts/svg_to_canvas.js"></script>

	<script type="text/javascript" src="javascripts/mouse.js"></script>
	<script type="text/javascript" src="javascripts/random.js"></script>
	<script type="text/javascript" src="javascripts/base64.js"></script>

	<script type="text/javascript" src="javascripts/svg_todataurl.js"></script>
	
	<script type="text/javascript">
	<![CDATA[
		var svg = null;
		var canvas = null;
		
		window.onload = function() {

			canvas = document.getElementById("canvas");
			svg = document.getElementById("svg");
			
			PixelCanvas.init(canvas);
			// var canvastool = document.getElementById("canvasarea").getElementsByClassName("toolbar")[0];
			// activatePixelToolbar(canvastool, PixelCanvas);

			VectorSVG.init(svg);
			
			for (var i = 0; i < 3; i++) {
				VectorSVG.addRandomCircle();
				PixelCanvas.drawRandomPixel();
			}
		}
		
		function export_img(data_url) {
			$("#export_img").attr("src", data_url);
		}
		
		function export_window(data_url) {
			window.open(data_url);
		}
		
		function break_now(klass) {
			// TODO: efekti
			$("." + klass).addClass("broken");
		}

		function will_break(klass) {
			// TODO: efekti
			$("." + klass).addClass("will_break_canvas");
			$("." + klass + " a").each(function(a) {
				this.href += " break_now('will_read_canvas');";
			})
		}

	]]>	
	</script>
	
</head>

<body>
	<h1>Pottisheads' Final SVG vs. Canvas</h1>
	
	<dl>
		<dt>Legend (based on background-color):</dt>
		<dd class="broken">This won't work anymore, because Canvas' <code>origin-clean</code> is <var>dirty</var>. Maybe you broke it?</dd>
		<dd class="will_break_canvas">Beware! This will set Canvas' <code>origin-clean</code> <var>dirty</var>, making Canvas write-only.</dd>
		<dd class="might_break_canvas_legend">This <em>might</em> set Canvas' <code>origin-clean</code> <var>dirty</var>, depending on whether you're transferring images inside SVG data.</dd>
	</dl>
	
	<div id="svgarea">
		<h2>SVG (<a href="javascript:VectorSVG.clearCanvas();">clear</a>)</h2>
		
		<svg id="svg" width="500" height="300" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" />
	</div>

	<div id="canvasarea">
		<h2>Canvas (<a href="javascript:PixelCanvas.clearCanvas();">clear</a>)</h2>
		<canvas id="canvas" width="500" height="300">NO CANVAS FOR YOU</canvas>		
	</div>

	<div id="demolist">
		<ol>
	   		<li><a href="javascript:alert('Click and drag the Canvas area with your mouse!')">Draw pixel graphics with Canvas</a>
				<ol>
					<li><a href="javascript:PixelCanvas.drawImage('gordo-small.png');">Draw PNG Image</a></li>
					<li><a href="javascript:PixelCanvas.drawImage('gordo.svg');">Draw SVG Image</a></li>
				</ol>
			</li>
	   		<li><a href="javascript:alert('Click that SVG area with your mouse!')">Draw vector graphics with SVG</a>
				<ol>
					<li><a href="javascript:VectorSVG.addImage('gordo-small.png');">Draw PNG Image</a></li>
					<li><a href="javascript:VectorSVG.addImage('gordo.svg'); will_break('might_break_canvas');">Draw SVG Image</a></li>
					
				</ol>
			</li>
	   		<li>Interfaces between Canvas and SVG:
	         	<ol>

					<li>One-way only transfer from Canvas: canvas→svg , canvas→svg, …
	               		<ol>
							<li class="will_read_canvas"><a href="javascript:CanvasToSVG.convert(canvas, svg);">Canvas toDataURL</a>. Can be used multiple times when no SVG data is written onto Canvas.</li>
						</ol>
					</li>
         		
					<li>One-way only transfer from SVG: svg→canvas, svg→canvas, …
	               		<ol>
							<li class="will_break_canvas"><a href="javascript:SVGToCanvas.convert(svg, canvas); break_now('will_read_canvas');">Our client-side implementation</a>. Canvas becomes write-only.</li>
						</ol>
					</li>
         		
					<li>Two-way transfer: svg→canvas→svg→canvas→svg, ..
	               		<ol>
							<li class="will_read_canvas"><a href="javascript:CanvasToSVG.convert(canvas, svg);">Canvas toDataURL</a>. (as in 3.a.i)</li>
	               			<li>SVG→Canvas complete (non-safe) transfer, including possibly non-secure elements:
	                     		<ol>
									<li><a href="javascript:SVGToCanvas.convertServer(svg, canvas);">SVG rastrerization server</a> (with Imagemagick or similar).</li>
									<li><a href="javascript:alert('Dear browser manufacturers, please implement it!');">Our proposed SVG.toDataURL recommendation</a>. No current client-side solution works two-way. We’re waiting for browser manufacturers.</li>
								</ol>
	               			</li>
							<li>SVG→Canvas security-safe (non-image and non-foreign) elements:
	                     		<ol>
									<li><a href="javascript:alert('Dear browser manufacturers, please implement it!');">Our proposed SVG.toDataURL recommendation</a>. No current client-side solution works two-way. We’re waiting for browser manufacturers.</li>
	                     			<li class="might_break_canvas"><a href="javascript:SVGToCanvas.convertCanvg(svg, canvas);">Canvg</a> (or other SVG rasterization library). Will make Canvas write-only only if the imported SVG has images from different origin, or embedded svg images.</li>
								</ol>
							</li>
						</ol>
					</li>
				</ol>
			</li>
	

			<li>Exporting as file
	    		<ol>
					<li>SVG→PNG
	          			<ol>
	          				<li><a href="javascript:SVGToCanvas.exportPNG(svg, export_img);">Our implementation (safe elements)</a> won't work, since SVG→Canvas→toDataURL always gives SECURITY_ERR. (btw same as 3.c.iii.2)</li>
	          				<li><a href="javascript:SVGToCanvas.exportPNGserver(svg, export_img);">Serverside (safe and non-safe elements)</a>. (btw same as 3.c.ii.1)</li>
	          				<li><a href="javascript:SVGToCanvas.exportPNGcanvg(svg, export_img);">canvg (safe elements)</a>. (btw same as 3.c.iii.2)</li>
	    				</ol>
					</li>

					<li>Canvas→PNG
						<ol>
							<li>Right-click→Save as… (if your browser supports it)</li>
	             			<li class="will_read_canvas"><a href="javascript:export_img(canvas.toDataURL());">Canvas.toDataURL (img element)</a></li>
	             			<li class="will_read_canvas"><a href="javascript:export_window(canvas.toDataURL());">Canvas.toDataURL (new window)</a></li>
	             			<li>3. 4.a</li>
						</ol>
					</li>
					
					<li>SVG→SVG file
						<ol>
							<li>Right-click→Save as… (<em>no</em> browser supports it)</li>
							<li><a href="javascript:SVGToCanvas.exportSVG(svg, export_img);">Serialize SVG as data url (img element)</a></li>
							<li><a href="javascript:SVGToCanvas.exportSVG(svg, export_window);">Serialize SVG as data url (new window)</a></li>
						</ol>
					</li>
				</ol>
			</li>
		</ol>
	</div>
	
	<img id="export_img" alt="placeholder for exported svg/pixel data" />

</body>
</html>

