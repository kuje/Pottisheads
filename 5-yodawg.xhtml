<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<link rel="stylesheet" type="text/css" href="stylesheets/master.css" />
	<title>Yo dawg</title>
	
	<script type="text/javascript" src="javascripts/jquery-1.3.2.min.js"></script>
	
	<script type="text/javascript" src="javascripts/rgbcolor.js"></script>
	<script type="text/javascript" src="javascripts/canvg.js"></script>
	
	<script type="text/javascript" src="javascripts/canvas_to_svg.js"></script>
	<script type="text/javascript" src="javascripts/svg_to_canvas.js"></script>

	<script type="text/javascript" src="javascripts/mouse.js"></script>
	<script type="text/javascript" src="javascripts/pixel_toolbar.js"></script>
	<script type="text/javascript" src="javascripts/pixel_canvas.js"></script>

	<script type="text/javascript" src="javascripts/random.js"></script>
	<script type="text/javascript" src="javascripts/vector_svg.js"></script>
	
	<script type="text/javascript">
		var svg = null;
		var canvas = null;
		
		window.onload = function() {
			canvas = document.getElementById("canvas");
			svg = document.getElementById("svg");
			
			PixelCanvas.init(canvas);
			var canvastool = document.getElementById("canvasarea").getElementsByClassName("toolbar")[0];
			activatePixelToolbar(canvastool, PixelCanvas);

			VectorSVG.init(svg);
		}
		
		function exportNewWindow() {
			var canvasDataUrl = canvas.toDataURL();
			var exportWindow = window.open(canvasDataUrl);
		}
		
		function exportServerSide() {
			if (typeof jQuery === 'undefined')
				alert("SVGToCanvas: jQuery is not loaded");

			var endpoint = "convert.php"
			var svg_xml = (new XMLSerializer()).serializeToString(svg)

			$.post(endpoint, { svg_xml: svg_xml },
					   function(data) {
						    window.open(data);
						  });
			
			}
		
	</script>
	
</head>

<body>
    <h1>Yo dawg, we herd you like SVG</h1>
	
	<ol>
   		<li>1. Draw pixel graphics with Canvas.</li>
   		<li>2. Draw vector graphics with SVG.</li>
   		<li>3. Interfaces between Canvas and SVG:
         	<ol>
				
				<li>1. One-way only transfer from Canvas: canvas→svg , canvas→svg, …
               		<ol>
						<li>1. Canvas toDataURL. Can be used multiple times when no SVG data is written onto Canvas.</li>
					</ol>
				</li>
         		
				<li>2. One-way only transfer from SVG: svg→canvas, svg→canvas, …
               		<ol>
						<li>1. Our implementation. Canvas becomes write-only.</li>
					</ol>
				</li>
         		
				<li>3. Two-way transfer: svg→canvas→svg→canvas→svg, ..
               		<ol>
						<li>1. Canvas→SVG: 3a.</li>
               			<li>2. SVG→Canvas complete (non-safe) transfer, including possibly non-secure elements:
                     		<ol>
								<li>1. SVG rastrerization server (with Imagemagick or similar).</li>
							</ol>
               			</li>
						<li>3. SVG→Canvas security-safe (non-image and non-foreign) elements:
                     		<ol>
								<li>1. Our proposed SVG.toDataURL recommendation. No current client-side solution works two-way. We’re waiting for browser manufacturers.</li>
                     			<li>2. SVG rasterization library (for Canvas), like CanVG [Canvg10].
									<ol>
										<li>1. BENCHMARK</li>
									</ol>
								</li>
							</ol>
						</li>
					</ol>
				</li>
			</ol>
		</li>
	
		<li>4. Exporting as PNG file
    		<ol>
				<li>1. SVG->PNG
          			<ol>
						<li>1. Our 2010 implementation (safe elements). (btw same as 3.c.iii.1)</li>
          				<li>2. <a href="javascript:exportServerSide()">Serverside</a> (safe and non-safe elements). (btw same as 3.c.ii.1)</li>
          				<li>3. canvg (safe elements). (btw same as 3.c.iii.2)</li>
    				</ol>
				</li>

				<li>2. Canvas→PNG
					<ol>
						<li>1. Right-click→Save as… (btw if your browser supports it)</li>
             			<li>2. Our implementation (SVG) → open data url in new tab/window</li>
             			<li>3. 4.a</li>
					</ol>
				</li>
			</ol>
		</li>
	</ol>

	<p>So we put SVG to yo Canvas and Canvas to yo SVG, so you can SVG while you Canvas and Canvas while you SVG</p>
	
	<div id="svgarea">
		<h2>SVG</h2>
		
		<div class="textToolbar">
			<a class="tool" href="javascript:VectorSVG.addCircle();">Circle</a>
			<a class="tool" href="javascript:VectorSVG.addImage('gordo-small.png');">PNG Image</a>
			<a class="tool" href="javascript:VectorSVG.addImage('gordo.svg');">SVG Image</a>
			<a class="tool" href="javascript:CanvasToSVG.convert(canvas, svg);">Import Canvas</a>
			<a class="tool" href="javascript:VectorSVG.clearCanvas();">clear</a>
		</div>
		
		<svg id="svg" width="500" height="300" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" />
	</div>

	<div id="canvasarea">
		<h2>Canvas</h2>
		
		<div class="toolbar">
			<div class="color" style="background: red;" />
			<div class="color" style="background: green;" />
			<div class="color" style="background: blue;" />
			<div class="color" style="background: black;" />
			<div class="color" style="background: white;" />
			
			<div class="brush" style="padding: 1em;" />
			<div class="brush" style="padding: 0.5em; margin-top: 0.4em;" />
			<div class="brush" style="padding: 0.1em; margin-top: 0.9em;" />
			<span class="tool" style="padding: 1em 0; margin: 0;"></span>
			
			<a class="tool" href="javascript:SVGToCanvas.convert(svg, canvas);">Import SVG (client)</a>
			<a class="tool" href="javascript:SVGToCanvas.convertCanvg(svg, canvas);">Import SVG (canvg)</a>
			<br />
			<a class="tool" href="javascript:PixelCanvas.drawImage('gordo-small.png');">PNG Image</a>
			<a class="tool" href="javascript:PixelCanvas.drawImage('gordo.svg');">SVG Image</a>
			<a class="tool" href="javascript:PixelCanvas.clearCanvas();">clear</a>
		</div>
		
		<canvas id="canvas" width="500" height="300">NO CANVAS FOR YOU</canvas>
	</div>
		
</body>
</html>

